name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: react-docker-app
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --coverage --ci --testResultsProcessor=jest-junit --watchAll=false --passWithNoTests
      env:
        CI: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: junit.xml
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d -p 3000:80 --name test-container ${{ env.IMAGE_NAME }}:latest
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        sleep 10
        
        # Test if the container is running
        if [ $(docker ps -q -f name=test-container) ]; then
          echo "‚úÖ Container is running successfully"
        else
          echo "‚ùå Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test HTTP response
        echo "Testing HTTP response..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
        if [ $HTTP_CODE -eq 200 ]; then
          echo "‚úÖ HTTP test passed (Status: $HTTP_CODE)"
        else
          echo "‚ùå HTTP test failed (Status: $HTTP_CODE)"
          docker logs test-container
          exit 1
        fi
        
        # Test if React app content is present
        echo "Testing React app content..."
        CONTENT=$(curl -s http://localhost:3000)
        if echo "$CONTENT" | grep -q "React Docker App"; then
          echo "‚úÖ React app content test passed"
        else
          echo "‚ùå React app content test failed"
          echo "Response content:"
          echo "$CONTENT"
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Test Docker image health
      run: |
        # Test container resource usage
        docker run --rm ${{ env.IMAGE_NAME }}:latest nginx -t
        echo "‚úÖ Nginx configuration is valid"
        
        # Check image size
        IMAGE_SIZE=$(docker images ${{ env.IMAGE_NAME }}:latest --format "{{.Size}}")
        echo "üì¶ Image size: $IMAGE_SIZE"
        
        # List image layers for optimization insights
        echo "üîç Image layers:"
        docker history ${{ env.IMAGE_NAME }}:latest --format "table {{.CreatedBy}}\t{{.Size}}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for security scan
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail the build on vulnerabilities
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push to Registry
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0.17.2
      with:
        image: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy notification
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}:latest"
        echo "This is where you would deploy to your staging environment"
        echo "Examples:"
        echo "- AWS ECS deployment"
        echo "- Kubernetes deployment" 
        echo "- AWS App Runner deployment"
        echo "- Docker Swarm deployment"
        echo ""
        echo "To enable actual deployment, configure your deployment tool here"
        echo "and set up the 'staging' environment in GitHub repository settings"

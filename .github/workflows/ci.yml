name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: react-docker-app
  REGISTRY: ghcr.io
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try npm ci first (preferred for CI), fallback to npm install if it fails
        npm ci || npm install
      
    - name: Run tests
      run: npm test -- --coverage --ci --testResultsProcessor=jest-junit --watchAll=false --passWithNoTests
      env:
        CI: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: junit.xml
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d -p 3000:80 --name test-container ${{ env.IMAGE_NAME }}:latest
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        sleep 10
        
        # Test if the container is running
        if [ $(docker ps -q -f name=test-container) ]; then
          echo "✅ Container is running successfully"
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test HTTP response
        echo "Testing HTTP response..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
        if [ $HTTP_CODE -eq 200 ]; then
          echo "✅ HTTP test passed (Status: $HTTP_CODE)"
        else
          echo "❌ HTTP test failed (Status: $HTTP_CODE)"
          docker logs test-container
          exit 1
        fi
        
        # Test if React app content is present
        echo "Testing React app content..."
        CONTENT=$(curl -s http://localhost:3000)
        if echo "$CONTENT" | grep -q "React Docker App"; then
          echo "✅ React app content test passed"
        else
          echo "❌ React app content test failed"
          echo "Response content:"
          echo "$CONTENT"
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Test Docker image health
      run: |
        # Test container resource usage
        docker run --rm ${{ env.IMAGE_NAME }}:latest nginx -t
        echo "✅ Nginx configuration is valid"
        
        # Check image size
        IMAGE_SIZE=$(docker images ${{ env.IMAGE_NAME }}:latest --format "{{.Size}}")
        echo "📦 Image size: $IMAGE_SIZE"
        
        # List image layers for optimization insights
        echo "🔍 Image layers:"
        docker history ${{ env.IMAGE_NAME }}:latest --format "table {{.CreatedBy}}\t{{.Size}}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for security scan
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail the build on vulnerabilities
        
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true  # Don't fail if SARIF upload fails
        
    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: trivy-results.sarif
        retention-days: 30

  build-and-push:
    name: Build and Push to Registry
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build local image for SBOM
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Generate SBOM for local image
      uses: anchore/sbom-action@v0.17.2
      with:
        image: ${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
      continue-on-error: true  # Don't fail the build if SBOM generation fails
      
    - name: Generate SBOM with Syft (fallback)
      if: failure()
      run: |
        # Install Syft if SBOM action failed
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Generate SBOM with Syft directly
        syft ${{ env.IMAGE_NAME }}:latest -o spdx-json=sbom.spdx.json || echo "SBOM generation skipped"
      continue-on-error: true
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30

  deploy-staging:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
      EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Debug environment variables
      run: |
        echo "🔍 Debug Info:"
        echo "AWS Region: ${AWS_DEFAULT_REGION}"
        echo "EB Application Name: ${EB_APPLICATION_NAME}"
        echo "EB Environment Name: ${EB_ENVIRONMENT_NAME}"
        echo "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
        aws sts get-caller-identity
        
    - name: Create Dockerrun.aws.json
      run: |
        cat > Dockerrun.aws.json << EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ env.REGISTRY }}/${{ github.repository }}:latest",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": "80",
              "HostPort": "80"
            }
          ],
          "Logging": "/var/log/nginx"
        }
        EOF
        
    - name: Create application version
      run: |
        # Get AWS account ID and region
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="elasticbeanstalk-${AWS_DEFAULT_REGION}-${AWS_ACCOUNT_ID}"
        
        echo "Using S3 bucket: $S3_BUCKET"
        
        # Create S3 bucket if it doesn't exist
        if ! aws s3 ls "s3://$S3_BUCKET" 2>/dev/null; then
          echo "Creating S3 bucket: $S3_BUCKET"
          if [ "${AWS_DEFAULT_REGION}" = "us-east-1" ]; then
            aws s3 mb "s3://$S3_BUCKET"
          else
            aws s3 mb "s3://$S3_BUCKET" --region "${AWS_DEFAULT_REGION}"
          fi
          
          # Wait a moment for bucket to be available
          sleep 5
        else
          echo "S3 bucket already exists: $S3_BUCKET"
        fi
        
        # Create deployment package
        zip -r deploy-package.zip Dockerrun.aws.json
        
        # Upload to S3
        aws s3 cp deploy-package.zip "s3://$S3_BUCKET/"
        
        # Create application version
        aws elasticbeanstalk create-application-version \
          --application-name "${EB_APPLICATION_NAME}" \
          --version-label "${{ github.sha }}" \
          --source-bundle S3Bucket="$S3_BUCKET",S3Key="deploy-package.zip" \
          --description "Deploy from GitHub Actions - ${{ github.sha }}"
          
    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk update-environment \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-name "${EB_ENVIRONMENT_NAME}" \
          --version-label "${{ github.sha }}"
          
    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for deployment to complete..."
        aws elasticbeanstalk wait environment-updated \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-name "${EB_ENVIRONMENT_NAME}"
        echo "✅ Deployment completed!"
        
    - name: Get deployment status
      run: |
        ENV_STATUS=$(aws elasticbeanstalk describe-environments \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-names "${EB_ENVIRONMENT_NAME}" \
          --query 'Environments[0].Status' --output text)
          
        ENV_HEALTH=$(aws elasticbeanstalk describe-environments \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-names "${EB_ENVIRONMENT_NAME}" \
          --query 'Environments[0].Health' --output text)
          
        ENV_URL=$(aws elasticbeanstalk describe-environments \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-names "${EB_ENVIRONMENT_NAME}" \
          --query 'Environments[0].CNAME' --output text)
          
        echo "🚀 Deployment Status: $ENV_STATUS"
        echo "❤️ Environment Health: $ENV_HEALTH"
        echo "🌐 Application URL: http://$ENV_URL"
        
        if [ "$ENV_HEALTH" != "Green" ]; then
          echo "⚠️ Environment health is not Green. Check AWS console for details."
          exit 1
        fi
        
    - name: Test deployed application
      run: |
        ENV_URL=$(aws elasticbeanstalk describe-environments \
          --application-name "${EB_APPLICATION_NAME}" \
          --environment-names "${EB_ENVIRONMENT_NAME}" \
          --query 'Environments[0].CNAME' --output text)
          
        echo "🧪 Testing deployed application..."
        
        # Wait a bit for the application to be fully ready
        sleep 30
        
        # Test HTTP response (using HTTP for single instance)
        for i in {1..5}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://$ENV_URL" || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Application is responding correctly (HTTP $HTTP_CODE)"
            break
          elif [ $i -eq 5 ]; then
            echo "❌ Application health check failed after 5 attempts (HTTP $HTTP_CODE)"
            exit 1
          else
            echo "⏳ Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Test content
        CONTENT=$(curl -s "http://$ENV_URL")
        if echo "$CONTENT" | grep -q "React Docker App"; then
          echo "✅ Application content verified - React app is running!"
        else
          echo "❌ Application content verification failed"
          exit 1
        fi
        
        echo "🎉 Deployment successful! Application is live at: http://$ENV_URL"
